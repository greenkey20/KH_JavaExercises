package com.kh.first; // 패키지 선언부 : 현재 클래스의 위치

	// 주석의 종류
	// 1. 한줄주석 (//) : 주석 내용이 한 줄일 때 사용
	// "//" 다음부터 줄의 끝까지의 내용이 주석으로 간주
	// 2. 여러줄 주석(/* ~~~ */) : 여러줄의 주석이 필요할 때 사용
	// /* ~~~ */이 사이에 모든 내용이 주석으로 간주

	/* 주석문
	 *  주석은 프로그램의 실행에 영향을 끼치지 않음
	 *  코드를 작성한 후 그 코드를 이해하기 쉽도록 하기위해 작성
	 *  주석을 달아놓으면 유지보수 시간을 줄일 수 있음
	 */

	/* 패키지
	 * 
	 * 한 패키지 안에 여러 클래스들이 존재할 수 있음
	 * 단, 동일한 이름의 클래스는 존재할 수 없음
	 * 모든 클래스들이 동일한 패키지 안에 존재하고 있으면 관리가 힘들다
	 * 클래스들을 용도에 맞게 구분해서 패키지에 보관하는것이 좋다.
	 * 
	 * 권장사항!
	 * 
	 * 1) 패키지는 적어도 세단계 이상으로 만들어 주는것을 권장한다.
	 * com.kh.first
	 * com.회사이름.프로젝트이름, 팀 이름, 카테고리 이름
	 * 
	 * 2) 패키지의 두번째 레벨 까지는 도메인의 역순으로 만든다.
	 * 왜? 도메인주소는 고유한 값이기 때문에 중복을 방지 할 수 있다.
	 * 왜? 도메인 주소만봐도 어느회사에서 제작한 프로젝트인지 파악이 가능하다.
	 */

public class HelloWorld { // 클래스 이름은 HelloWorld로 지었음 {Scope}
	
	// main 메소드() : 프로그램의 시작점, 프로그램당 최소 1개는 갖고 있어야한다.
	public static void main(String[] args) { // main 메소드 영역 시작
		//* Method : 사전적으로는 기능을 의미 함, 하나의 기능단위
		// 하나의 클래스안에 여러개의 메소드가 존재할 수 있음
		// 메소드를 사용할 때 "호출"이라고 한다.
		//* 세미콜론(;) : 논리적인 한 문장이 끝날 때 반드시 세미콜론을 붙임
		
		System.out.println("Hi Everyone!");
		
		printMyName();
		
	} // main 메소드 영역 끝
	
	public static void printMyName() { // printMyName 메소드 시작
		// 안녕하세요. 제 이름은 XXX 입니다.
		System.out.println("안녕하세요. 제 이름은 이승철 입니다.");
	} // printMyName 메소드 영역
	
	
}// 클래스 영역 끝